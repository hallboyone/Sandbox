#include <string>
#include <vector>

#ifndef INPUTFLAGS
#define INPUTFLAGS

namespace HB1{
class InputFlags {
public:
  //=============== Custom data types ===============
  enum DataType {NONE=0, INT, DOUBLE, CHAR, STRING};

  typedef struct CommandLineFlag_{
    std::string name;
    std::string desc;
    char sh;
    DataType para_t;
    std::string default_para;
    bool active;
    std::string para;
  } CommandLineFlag;
  
  //================= Constructors ==================
  //InputFlags();

  void setFlags(int argc, char ** argv);
private:
  //Members
  std::vector<CommandLineFlag> flags_; // All flags generated by template file
  std::vector<std::string> other_input_; //Any input from argv that could not be matched to flag

  //==================== Methods =====================

  //Parse flags.tmpl and build an array of the possible flags.
  void parseFlagTemplates();

  //Moves forward in the ifstream to the begining of the first '{' not in a comment
  int static move2BlockStart(std::ifstream & f);

  //Finds the next block in the file and saves the valid chars into block
  int static extractNextBlock(std::ifstream & f, std::string & block);

  //Checks if char is one that should be saved from within flag template block
  bool static validBlockChar(const char & c);
  
  //Takes the block template string and uses it to make a new flag
  //Conducts error check to make sure the flag is unique and the para_t and default para match
  void BuildFlag(std::string tmpl_str);
  
  //Finds and varifies the the indicated field from a block template string
  std::string static readName       (std::string & root_string);
  std::string static readDesc       (std::string & root_string);
  char        static readSH         (std::string & root_string);
  DataType    static readPara_t     (std::string & root_string);
  std::string static readDefaultPara(std::string & root_string);
  
  //Finds the key in the string and extracts the chars up to the desired delim char
  int static readKeyValue(const std::string & s, const char * key, size_t len, std::string & val, char delim = ';');

  //Counts the number of leading '-' in the string 
  int static numLeadingDash(const std::string & arg);

  //Reads through an input string vector and converts any sh notation to full names
  std::vector<std::string> formatInputArgs(int argc, char ** argv);

  //Looks for a flag with name matching *it and sets it as active. If needed,
  //the parameter is also read.
  void inputArg2Flag(std::vector<std::string>::iterator & it, const std::vector<std::string>::iterator & args_end);

  //Returns an iterator pointing at the flag with the name 'name'. If none, returns flags_.end()
  std::vector<CommandLineFlag>::iterator getFlagWithName(const std::string & name, bool is_sh);

  void static printFlag(const CommandLineFlag & flag);
};
  
}// namespace HB1

#endif
